datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  jobTitle     String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  postcode     String?

  notes    Note[]
  invoices Invoice[]
  Job      Job[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model InvoiceStatus {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
}

model Invoice {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  client   Client          @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clientId String
  status   InvoiceStatus[]
}

model Client {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  phone        String
  addressLine1 String?
  addressLine2 String?
  townCity     String?
  postcode     String?
  Invoice      Invoice[]
  Job          Job[]
}

model Job {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clientId String

  description String
}
